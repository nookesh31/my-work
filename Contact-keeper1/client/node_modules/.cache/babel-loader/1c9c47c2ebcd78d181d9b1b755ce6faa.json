{"ast":null,"code":"var _jsxFileName = \"/home/dev5/Desktop/Nookesh/Contact-Keeper/client/src/context/contact/ContactState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport * as uuid from 'uuid';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactState = props => {\n  _s();\n\n  const initialState = {\n    contacts: [{\n      id: 1,\n      name: 'pallavi',\n      email: 'pallavi@gmail.com',\n      phone: '123456789',\n      type: 'professional'\n    }, {\n      id: 2,\n      name: 'nookesh',\n      email: 'nookesh@gmail.com',\n      phone: '234567891',\n      type: 'personal'\n    }, {\n      id: 3,\n      name: 'yamuna',\n      email: 'yamuna@gmail.com',\n      phone: '234567891',\n      type: 'personal'\n    }, {\n      id: 4,\n      name: 'prasad',\n      email: 'prasad@gmail.com',\n      phone: '234156789',\n      type: 'professional'\n    }],\n    current: null,\n    filtered: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); // add contact\n\n  const addContact = contact => {\n    contact.id = uuid.v4();\n    dispatch({\n      type: ADD_CONTACT,\n      payload: contact\n    });\n  }; // delete contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; // set current\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // clear current\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // update contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; // filter contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // clear contacts\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  }; // set alert\n  // remove alert\n\n\n  return /*#__PURE__*/_jsxDEV(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactState, \"wVzs03LCUcYtKoVkfIy0rOpkY6I=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/home/dev5/Desktop/Nookesh/Contact-Keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","uuid","ContactContext","contactReducer","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","ContactState","props","initialState","contacts","id","name","email","phone","type","current","filtered","state","dispatch","addContact","contact","v4","payload","deleteContact","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React,{ useReducer } from 'react';\nimport * as uuid from 'uuid';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER,\n    \n} from '../types';\n\nconst ContactState = props => {\n    const initialState = {\n        contacts: [{\n           id: 1,\n           name: 'pallavi',\n           email: 'pallavi@gmail.com',\n           phone:'123456789',\n           type: 'professional'\n\n        },\n        {\n            id: 2,\n            name: 'nookesh',\n            email: 'nookesh@gmail.com',\n            phone:'234567891',\n            type: 'personal'\n \n         },\n         {\n            id: 3,\n            name: 'yamuna',\n            email: 'yamuna@gmail.com',\n            phone:'234567891',\n            type: 'personal'\n \n         },\n         {\n            id: 4,\n            name: 'prasad',\n            email: 'prasad@gmail.com',\n            phone:'234156789',\n            type: 'professional'\n \n         }\n        ],\n        current: null,\n        filtered: null\n    \n    };\n    const [state, dispatch ] = useReducer(contactReducer, initialState);\n    // add contact\n    const addContact = contact => {\n        contact.id = uuid.v4();\n        dispatch({ type: ADD_CONTACT,payload: contact });\n\n    }\n    // delete contact\n    const deleteContact = id => {\n        dispatch({ type: DELETE_CONTACT,payload: id});\n    }\n    // set current\n    const setCurrent = contact=> {\n        dispatch({ type: SET_CURRENT,payload: contact});\n    }\n    // clear current\n    const clearCurrent = ()=> {\n        dispatch({ type: CLEAR_CURRENT});\n    }\n    // update contact\n    const updateContact = contact=> {\n        dispatch({ type: UPDATE_CONTACT,payload: contact});\n    }\n    // filter contacts\n    const filterContacts = text=> {\n        dispatch({ type: FILTER_CONTACTS,payload: text });\n    }\n    // clear contacts\n    const clearFilter = ()=> {\n        dispatch({ type: CLEAR_FILTER });\n    }\n    // set alert\n    // remove alert\n\nreturn (\n    <ContactContext.Provider value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        addContact,\n        deleteContact,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter\n\n    }}>\n        { props.children}\n    </ContactContext.Provider>\n)\n};\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}